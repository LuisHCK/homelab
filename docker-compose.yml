services:
    pihole:
        container_name: pihole
        image: pihole/pihole:latest
        ports:
            - "53:53/tcp"
            - "53:53/udp"
            - "8088:80/tcp"
        environment:
            TZ: 'America/Managua'
            WEBPASSWORD: '%XTWodu3j5YaTvfB'
            # Volumes store your data between container upgrades
        volumes:
            - './etc-pihole:/etc/pihole'
            - './etc-dnsmasq.d:/etc/dnsmasq.d'
        restart: unless-stopped

    jellyfin:
        image: jellyfin/jellyfin
        container_name: jellyfin
        network_mode: 'host'
        volumes:
            - ./jellyfin/config:/config
            - /mnt/USB/cache:/cache
            - /mnt/USB:/media/media
        extra_hosts:
            - "host.docker.internal:host-gateway"
        restart: unless-stopped

    memos:
        image: neosmemo/memos:latest
        container_name: memos
        volumes:
            - ./memos:/var/opt/memos
        ports:
            - 5230:5230

    proxy-manager:
        image: jc21/nginx-proxy-manager:latest
        container_name: proxy-manager
        ports:
            - 80:80
            - 443:443
            - 81:81
        volumes:
            - ./proxy-manager/data:/data
            - ./proxy-manager/letsencrypt:/etc/letsencrypt

    microbin:
        image: danielszabo99/microbin:latest
        container_name: microbin
        env_file:
            - .env.microbin
        restart: always
        ports:
            - 8080:8080
        volumes:
            - ./microbin-data:/app/microbin_data

    dashy:
        # To build from source, replace 'image: lissy93/dashy' with 'build: .'
        # build: .
        image: lissy93/dashy
        container_name: Dashy
        # Pass in your config file below, by specifying the path on your host machine
        # volumes:
        # - /root/my-config.yml:/app/public/conf.yml
        ports:
            - 4000:80
        # Set any environmental variables
        environment:
            - NODE_ENV=production
        # Specify your user ID and group ID. You can find this by running `id -u` and `id -g`
        #  - UID=1000
        #  - GID=1000
        # Specify restart policy
        restart: unless-stopped
        # Configure healthchecks
        healthcheck:
            test: [ 'CMD', 'node', '/app/services/healthcheck' ]
            interval: 1m30s
            timeout: 10s
            retries: 3
            start_period: 40s

    plex:
        image: lscr.io/linuxserver/plex:latest
        container_name: plex
        network_mode: host
        environment:
            - PUID=1000
            - PGID=1000
            - TZ=Etc/UTC
            - VERSION=docker
        volumes:
            - ./plex:/config
            - /mnt/USB/tvseries:/tv
            - /mnt/USB/movies:/movies
        restart: unless-stopped
